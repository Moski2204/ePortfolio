[
  {
    "title": "Part 1. Implementation of Dark Mode",
    "description": "1. I implemented the dark mode feature in my ePortfolio by adding a button labeled 'Dark Mode' with the ID 'darkModeBtn' to the navigation bar and styled it with CSS to match the ePortfolio's theme.<br><br> 2. I then used JavaScript to add functionality to the button, by creating an anonymous arrow function that listens for click events. When clicked, the function uses the toggle method to switch between light and dark modes via the dark-mode class (Step 4). The text inside the button also updates to 'Light Mode' when dark mode is enabled, and then it changes back to 'Dark Mode' when your in light mode. This was done through an if statement.<br><br> 3. I used localStorage to remember if dark mode is enabled or disabled by storing this preference with the setItem method. When the page is refreshed, an if statement checks the saved preference and re-applies dark mode if it was previously enabled.<br><br> 4. Lastly, to complete the anonymous function from Step 2, I added CSS code. After creating a new dark-mode class in the toggle method (line 485), I added a body.dark-mode selector to display the dark background on my ePortfolio whenever the button was pressed. The toggle method allows the button to switch my ePortfolio between light and dark modes. Furthermore, I also added a new 'body.dark-mode .header' selector to style the header when it is in dark mode, as well as a 'body.dark-mode #darkModeBtn' selector to restyle the button and make it stand out in dark mode <br><br><br><br> See the images below for reference:"
  },
  {
    "title": "Part 2. Implementation of the Dynamic Blog page",
    "description": "1. Initially, I created a blog.html file to display the blog posts. <br><br> 2. Next, I made a posts.json file to store the blog content. <br><br> 3. Then, I developed a scripts.js file to fetch and display the blog posts from posts.json in blog.html. The initial code, provided by my professor, had a few errors, such as the incorrect file path for posts.json. I corrected these issues, added additional code such as postElement.innerHTML (line 10) to insert the JSON data into the HTML. Lines 11-14 specify how the data is displayed on the blog. <br><br> 4. Finally, I added a div with the ID ''blog-list'' to blog.html, which is referenced in the fetch code (line 2) to display the blog posts on the page. <br><br> 5. I then went on my blog.html and styled my blog posts using the ''blog-list'' id. I used that id to format the layout of my blog posts. <br><br> 6. Realizing I wanted better styling, I updated my script to include ''postElement.className = 'blogContent' ''; (line 9). This added the blogContent class to each post, which allowed me to apply the same styles for all posts. <br><br> 7. Next, I added a div with the class container to blog.html, and inside it, I included two div elements with classes ''Steps'' and ''StepsTwo''. This allowed me tohelped me position my blog posts as needed (lines 71-121). <br><br> 8. Finally, I added CSS rules for the ''container'', ''Steps'', and ''StepsTwo'' classes in my blog.html to style the blog posts and make them look nice (lines 34-42, 45-51, and 55-62) . "
  }
]
